'use strict'; // code generated by pbf v3.2.1

// Timelines ========================================

export const Timelines = self.Timelines = {};

Timelines.read = function (pbf, end) {
    return pbf.readFields(Timelines._readField, { timelines: [] }, end);
};
Timelines._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.timelines.push(Timeline.read(pbf, pbf.readVarint() + pbf.pos));
};
Timelines.write = function (obj, pbf) {
    if (obj.timelines) for (var i = 0; i < obj.timelines.length; i++) pbf.writeMessage(1, Timeline.write, obj.timelines[i]);
};

// Timeline ========================================

var Timeline = self.Timeline = {};

Timeline.read = function (pbf, end) {
    return pbf.readFields(Timeline._readField, { id: "", clusters: [], frames: 0 }, end);
};
Timeline._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.id = pbf.readString();
    else if (tag === 2) obj.clusters.push(Cluster.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 3) obj.frames = pbf.readVarint();
};
Timeline.write = function (obj, pbf) {
    if (obj.id) pbf.writeStringField(1, obj.id);
    if (obj.clusters) for (var i = 0; i < obj.clusters.length; i++) pbf.writeMessage(2, Cluster.write, obj.clusters[i]);
    if (obj.frames) pbf.writeVarintField(3, obj.frames);
};

// Cluster ========================================

var Cluster = self.Cluster = {};

Cluster.read = function (pbf, end) {
    return pbf.readFields(Cluster._readField, { id: 0, timestamps: [] }, end);
};
Cluster._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.id = pbf.readVarint();
    else if (tag === 2) obj.timestamps.push(Timestamp.read(pbf, pbf.readVarint() + pbf.pos));
};
Cluster.write = function (obj, pbf) {
    if (obj.id) pbf.writeVarintField(1, obj.id);
    if (obj.timestamps) for (var i = 0; i < obj.timestamps.length; i++) pbf.writeMessage(2, Timestamp.write, obj.timestamps[i]);
};

// Timestamp ========================================

var Timestamp = self.Timestamp = {};

Timestamp.read = function (pbf, end) {
    return pbf.readFields(Timestamp._readField, { start: 0, end: 0 }, end);
};
Timestamp._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.start = pbf.readFloat();
    else if (tag === 2) obj.end = pbf.readFloat();
};
Timestamp.write = function (obj, pbf) {
    if (obj.start) pbf.writeFloatField(1, obj.start);
    if (obj.end) pbf.writeFloatField(2, obj.end);
};
